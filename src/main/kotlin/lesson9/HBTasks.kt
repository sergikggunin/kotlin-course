package org.example.lesson9

fun main() {
    val birthday = "02.10.2024"
    val today = "02.10.2024"  // –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç—É –¥–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    println(greetBirthday(today, birthday))
}

fun greetBirthday(today: String, birthday: String): String {
    return when {
        isBirthday(today, birthday) -> "üéâ –°–µ–≥–æ–¥–Ω—è —Ç–æ—Ç —Å–∞–º—ã–π –¥–µ–Ω—å! –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"
        isBirthdaySoon(today, birthday) -> "üéà –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ —Å–∫–æ—Ä–æ! –ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É! üéâ"
        else -> {
            val monthsLeft = monthsUntilBirthday(today, birthday)
            "üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–æ—Ç –¥–µ–Ω—å! –ñ–¥–∏—Ç–µ –µ—â–µ $monthsLeft –º–µ—Å—è—Ü${if (monthsLeft > 1) "–∞" else ""} –¥–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è! üéä"
        }
    }
}

fun isBirthday(today: String, birthday: String): Boolean {
    return today == birthday
}

fun isBirthdaySoon(today: String, birthday: String): Boolean {
    val todayDate = today.split(".").map { it.toInt() }
    val birthdayDate = birthday.split(".").map { it.toInt() }
    return todayDate[1] == birthdayDate[1] && todayDate[0] < birthdayDate[0]
}

fun monthsUntilBirthday(today: String, birthday: String): Int {
    val todayParts = today.split(".").map { it.toInt() }
    val birthdayParts = birthday.split(".").map { it.toInt() }

    val todayMonth = todayParts[1]
    val todayDay = todayParts[0]
    val birthdayMonth = birthdayParts[1]
    val birthdayDay = birthdayParts[0]

    return when {
        todayMonth == birthdayMonth && todayDay < birthdayDay -> 0
        todayMonth == birthdayMonth -> 12
        todayMonth < birthdayMonth -> birthdayMonth - todayMonth
        else -> (12 - todayMonth) + birthdayMonth
    }
}
